const questions = [
    {
      question: "What type of language is generated by a context-free grammar?",
      answers: [
        { text: "Regular language", correct: false },
        { text: "Context-sensitive language", correct: false },
        { text: "Context-free language", correct: true },
        { text: "Regular expression language", correct: false }
      ]
    },
    {
      question: "In the Chomsky hierarchy, which level corresponds to context-free languages?",
      answers: [
        { text: "Level 0", correct: false },
        { text: "Level 1", correct: false },
        { text: "Level 2", correct: true },
        { text: "Level 3", correct: false }
      ]
    },
    {
      question: "Which automaton is used to implement context-free grammar?",
      answers: [
        { text: "Finite automaton", correct: false },
        { text: "Turing machine", correct: false },
        { text: "Pushdown automaton", correct: true },
        { text: "State machine", correct: false }
      ]
    },
    {
      question: "What is the purpose of the stack in a pushdown automaton?",
      answers: [
        { text: "To store terminal symbols", correct: false },
        { text: "To implement context-sensitive grammar", correct: false },
        { text: "To implement context-free grammar", correct: true },
        { text: "To store production rules", correct: false }
      ]
    },
    {
      question: "In the example, what does the production rule A → α signify?",
      answers: [
        { text: "A can produce any string", correct: false },
        { text: "A can produce the empty string", correct: false },
        { text: "A can produce the string α", correct: true },
        { text: "A can produce only terminal symbols", correct: false }
      ]
    },
    {
      question: "How is the acceptance of a string determined in the pushdown automaton?",
      answers: [
        { text: "By reaching a specific state", correct: false },
        { text: "By an empty stack", correct: true },
        { text: "By reading the entire input string", correct: false },
        { text: "By pushing elements onto the stack", correct: false }
      ]
    },
    {
      question: "What role does the stack play in a pushdown automaton?",
      answers: [
        { text: "It stores terminal symbols", correct: false },
        { text: "It implements a queue", correct: false },
        { text: "It implements a memory tape", correct: true },
        { text: "It keeps track of variables and helps with parsing", correct: false }
      ]
    },
    {
      question: "Which stage in the pushdown automaton signifies the acceptance of a string?",
      answers: [
        { text: "State 1", correct: false },
        { text: "State 2", correct: false },
        { text: "Final transition rule", correct: true },
        { text: "State 3", correct: false }
      ]
    },
    {
      question: "In the real world, where are context-free languages commonly used?",
      answers: [
        { text: "Natural language processing", correct: false },
        { text: "Artificial intelligence", correct: false },
        { text: "Compiler construction", correct: true },
        { text: "Database management", correct: false }
      ]
    },
    {
      question: "What is the primary characteristic of context-free languages in programming languages?",
      answers: [
        { text: "Dynamic typing", correct: false },
        { text: "Static typing", correct: false },
        { text: "Variable assignment", correct: false },
        { text: "Fixed production rules", correct: true }
      ]
    }
];

const questionElement = document.getElementById("question");
const answerButtons = document.getElementById("answer-buttons");
const nextButton = document.getElementById("next-btn");

let currentQuestionIndex = 0;
let score = 0;

function startQuiz() {
  currentQuestionIndex = 0;
  score = 0;
  nextButton.innerHTML = "Next";
  showQuestion();
  nextButton.addEventListener("click", nextQuestion);
}

function showQuestion() {
  resetState();
  let currentQuestion = questions[currentQuestionIndex];
  let questionNo = currentQuestionIndex + 1;
  questionElement.innerHTML = questionNo + ". " + currentQuestion.question;

  currentQuestion.answers.forEach(answer => {
    const button = document.createElement("button");
    button.innerHTML = answer.text;
    button.classList.add("btn");
    answerButtons.appendChild(button);

    if (answer.correct) {
      button.dataset.correct = answer.correct;
    }

    button.addEventListener("click", selectAnswer);
  });
}

function resetState() {
  while (answerButtons.firstChild) {
    answerButtons.removeChild(answerButtons.firstChild);
  }
}

function selectAnswer(e) {
  const selectedBtn = e.target;
  const isCorrect = selectedBtn.dataset.correct === "true";

  Array.from(answerButtons.children).forEach(button => {
    if (button !== selectedBtn) {
      button.disabled = true;
    }

    if (button.dataset.correct === "true") {
      button.classList.add("correct");
    } else if (button === selectedBtn) {
      button.classList.add("incorrect");
    }
  });

  nextButton.style.display = "block"; // Show 'Next' button after selecting an answer

  if (isCorrect) {
    score++;
  }
}

function nextQuestion() {
  currentQuestionIndex++;

  if (currentQuestionIndex < questions.length) {
    showQuestion();
    nextButton.style.display = "none"; // Hide 'Next' button for the next question
  } else {
    showScore();
  }
}

function showScore() {
  alert(`Quiz completed! Your score: ${score}/${questions.length}`);
  const tryAgain = confirm("Do you want to try again?");
  if (tryAgain) {
    startQuiz();
  }
}

startQuiz();